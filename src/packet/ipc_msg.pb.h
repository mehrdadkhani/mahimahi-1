// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc_msg.proto

#ifndef PROTOBUF_ipc_5fmsg_2eproto__INCLUDED
#define PROTOBUF_ipc_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace rl {
class IPCMessage;
class IPCMessageDefaultTypeInternal;
extern IPCMessageDefaultTypeInternal _IPCMessage_default_instance_;
class IPCReply;
class IPCReplyDefaultTypeInternal;
extern IPCReplyDefaultTypeInternal _IPCReply_default_instance_;
}  // namespace rl

namespace rl {

namespace protobuf_ipc_5fmsg_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ipc_5fmsg_2eproto

// ===================================================================

class IPCMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rl.IPCMessage) */ {
 public:
  IPCMessage();
  virtual ~IPCMessage();

  IPCMessage(const IPCMessage& from);

  inline IPCMessage& operator=(const IPCMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCMessage& default_instance();

  static inline const IPCMessage* internal_default_instance() {
    return reinterpret_cast<const IPCMessage*>(
               &_IPCMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IPCMessage* other);

  // implements Message ----------------------------------------------

  inline IPCMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  IPCMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IPCMessage& from);
  void MergeFrom(const IPCMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IPCMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // uint64 eqc = 2;
  void clear_eqc();
  static const int kEqcFieldNumber = 2;
  ::google::protobuf::uint64 eqc() const;
  void set_eqc(::google::protobuf::uint64 value);

  // uint64 dqc = 3;
  void clear_dqc();
  static const int kDqcFieldNumber = 3;
  ::google::protobuf::uint64 dqc() const;
  void set_dqc(::google::protobuf::uint64 value);

  // uint64 eqb = 4;
  void clear_eqb();
  static const int kEqbFieldNumber = 4;
  ::google::protobuf::uint64 eqb() const;
  void set_eqb(::google::protobuf::uint64 value);

  // uint64 qdelay = 5;
  void clear_qdelay();
  static const int kQdelayFieldNumber = 5;
  ::google::protobuf::uint64 qdelay() const;
  void set_qdelay(::google::protobuf::uint64 value);

  // float current_prob = 6;
  void clear_current_prob();
  static const int kCurrentProbFieldNumber = 6;
  float current_prob() const;
  void set_current_prob(float value);

  // @@protoc_insertion_point(class_scope:rl.IPCMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint64 eqc_;
  ::google::protobuf::uint64 dqc_;
  ::google::protobuf::uint64 eqb_;
  ::google::protobuf::uint64 qdelay_;
  float current_prob_;
  mutable int _cached_size_;
  friend struct protobuf_ipc_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IPCReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rl.IPCReply) */ {
 public:
  IPCReply();
  virtual ~IPCReply();

  IPCReply(const IPCReply& from);

  inline IPCReply& operator=(const IPCReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCReply& default_instance();

  static inline const IPCReply* internal_default_instance() {
    return reinterpret_cast<const IPCReply*>(
               &_IPCReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IPCReply* other);

  // implements Message ----------------------------------------------

  inline IPCReply* New() const PROTOBUF_FINAL { return New(NULL); }

  IPCReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IPCReply& from);
  void MergeFrom(const IPCReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IPCReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // float prob = 2;
  void clear_prob();
  static const int kProbFieldNumber = 2;
  float prob() const;
  void set_prob(float value);

  // @@protoc_insertion_point(class_scope:rl.IPCReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  float prob_;
  mutable int _cached_size_;
  friend struct protobuf_ipc_5fmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IPCMessage

// string msg = 1;
inline void IPCMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPCMessage::msg() const {
  // @@protoc_insertion_point(field_get:rl.IPCMessage.msg)
  return msg_.GetNoArena();
}
inline void IPCMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rl.IPCMessage.msg)
}
#if LANG_CXX11
inline void IPCMessage::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rl.IPCMessage.msg)
}
#endif
inline void IPCMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rl.IPCMessage.msg)
}
inline void IPCMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rl.IPCMessage.msg)
}
inline ::std::string* IPCMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:rl.IPCMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPCMessage::release_msg() {
  // @@protoc_insertion_point(field_release:rl.IPCMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPCMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rl.IPCMessage.msg)
}

// uint64 eqc = 2;
inline void IPCMessage::clear_eqc() {
  eqc_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IPCMessage::eqc() const {
  // @@protoc_insertion_point(field_get:rl.IPCMessage.eqc)
  return eqc_;
}
inline void IPCMessage::set_eqc(::google::protobuf::uint64 value) {
  
  eqc_ = value;
  // @@protoc_insertion_point(field_set:rl.IPCMessage.eqc)
}

// uint64 dqc = 3;
inline void IPCMessage::clear_dqc() {
  dqc_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IPCMessage::dqc() const {
  // @@protoc_insertion_point(field_get:rl.IPCMessage.dqc)
  return dqc_;
}
inline void IPCMessage::set_dqc(::google::protobuf::uint64 value) {
  
  dqc_ = value;
  // @@protoc_insertion_point(field_set:rl.IPCMessage.dqc)
}

// uint64 eqb = 4;
inline void IPCMessage::clear_eqb() {
  eqb_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IPCMessage::eqb() const {
  // @@protoc_insertion_point(field_get:rl.IPCMessage.eqb)
  return eqb_;
}
inline void IPCMessage::set_eqb(::google::protobuf::uint64 value) {
  
  eqb_ = value;
  // @@protoc_insertion_point(field_set:rl.IPCMessage.eqb)
}

// uint64 qdelay = 5;
inline void IPCMessage::clear_qdelay() {
  qdelay_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IPCMessage::qdelay() const {
  // @@protoc_insertion_point(field_get:rl.IPCMessage.qdelay)
  return qdelay_;
}
inline void IPCMessage::set_qdelay(::google::protobuf::uint64 value) {
  
  qdelay_ = value;
  // @@protoc_insertion_point(field_set:rl.IPCMessage.qdelay)
}

// float current_prob = 6;
inline void IPCMessage::clear_current_prob() {
  current_prob_ = 0;
}
inline float IPCMessage::current_prob() const {
  // @@protoc_insertion_point(field_get:rl.IPCMessage.current_prob)
  return current_prob_;
}
inline void IPCMessage::set_current_prob(float value) {
  
  current_prob_ = value;
  // @@protoc_insertion_point(field_set:rl.IPCMessage.current_prob)
}

// -------------------------------------------------------------------

// IPCReply

// string msg = 1;
inline void IPCReply::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPCReply::msg() const {
  // @@protoc_insertion_point(field_get:rl.IPCReply.msg)
  return msg_.GetNoArena();
}
inline void IPCReply::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rl.IPCReply.msg)
}
#if LANG_CXX11
inline void IPCReply::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rl.IPCReply.msg)
}
#endif
inline void IPCReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rl.IPCReply.msg)
}
inline void IPCReply::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rl.IPCReply.msg)
}
inline ::std::string* IPCReply::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:rl.IPCReply.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPCReply::release_msg() {
  // @@protoc_insertion_point(field_release:rl.IPCReply.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPCReply::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rl.IPCReply.msg)
}

// float prob = 2;
inline void IPCReply::clear_prob() {
  prob_ = 0;
}
inline float IPCReply::prob() const {
  // @@protoc_insertion_point(field_get:rl.IPCReply.prob)
  return prob_;
}
inline void IPCReply::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:rl.IPCReply.prob)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace rl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipc_5fmsg_2eproto__INCLUDED
